#!/bin/bash

# NEW ONE THAT I'M WORKING ON NOW!!!

mainstart=$(date +%s)

sudo sed -i "s/#precedence ::ffff:0:0\/96  100/precedence ::ffff:0:0\/96  100/" /etc/gai.conf

# Upgrade The Base Packages

export DEBIAN_FRONTEND=noninteractive

apt-get update
apt-get upgrade -y

# Add A Few PPAs To Stay Current

apt-get install -y --force-yes software-properties-common

# apt-add-repository ppa:fkrull/deadsnakes-python2.7 -y

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C

apt-add-repository ppa:nginx/development -y
apt-add-repository ppa:chris-lea/redis-server -y
apt-add-repository ppa:ondrej/apache2 -y

apt-add-repository ppa:ondrej/php -y

# Setup MySQL 5.7 Repositories


# Setup MariaDB Repositories

    sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
    sudo add-apt-repository 'deb [arch=amd64,i386] http://mirrors.accretive-networks.net/mariadb/repo/10.3/ubuntu xenial main'


# Update Package Lists

apt-get update
# Base Packages

apt-get install -y --force-yes build-essential curl fail2ban gcc git libmcrypt4 libpcre3-dev \
make python2.7 python-pip sendmail supervisor ufw unattended-upgrades unzip whois zsh

# Install Python Httpie

pip install httpie

# Disable Password Authentication Over SSH

sed -i "/PasswordAuthentication yes/d" /etc/ssh/sshd_config
echo "" | sudo tee -a /etc/ssh/sshd_config
echo "" | sudo tee -a /etc/ssh/sshd_config
echo "PasswordAuthentication no" | sudo tee -a /etc/ssh/sshd_config

# Restart SSH

ssh-keygen -A
service ssh restart

# Set The Hostname If Necessary


echo "beautiful-breeze" > /etc/hostname
sed -i 's/127\.0\.0\.1.*localhost/127.0.0.1	beautiful-breeze.localdomain beautiful-breeze localhost/' /etc/hosts
hostname beautiful-breeze


# Set The Timezone

# ln -sf /usr/share/zoneinfo/UTC /etc/localtime
ln -sf /usr/share/zoneinfo/UTC /etc/localtime

# Create The Root SSH Directory If Necessary

if [ ! -d /root/.ssh ]
then
	mkdir -p /root/.ssh
	touch /root/.ssh/authorized_keys
fi

# Setup Forge User

#useradd forge
#mkdir -p /home/forge/.ssh
#mkdir -p /home/forge/.forge
#adduser forge sudo

# Setup Bash For Forge User

#chsh -s /bin/bash forge
#cp /root/.profile /home/forge/.profile
#cp /root/.bashrc /home/forge/.bashrc

# Set The Sudo Password For Forge

#PASSWORD=$(mkpasswd HtDMwFH3WzolgpNQEL0t)
#usermod --password $PASSWORD forge

# Build Formatted Keys & Copy Keys To Forge

#cp /root/.ssh/authorized_keys /home/forge/.ssh/authorized_keys

# Create The Server SSH Key

#ssh-keygen -f /home/forge/.ssh/id_rsa -t rsa -N ''

# Copy Source Control Public Keys Into Known Hosts File

#ssh-keyscan -H github.com >> /home/forge/.ssh/known_hosts
#ssh-keyscan -H bitbucket.org >> /home/forge/.ssh/known_hosts
#ssh-keyscan -H gitlab.com >> /home/forge/.ssh/known_hosts

# Configure Git Settings

git config --global user.name "Patrick Gallagher"
git config --global user.email "accounts@overtlypress.com"

# Add The Reconnect Script Into Forge Directory

# Setup Forge Home Directory Permissions

# Setup UFW Firewall

ufw allow 22
ufw allow 80
ufw allow 443
ufw --force enable

# Allow FPM Restart

echo "forge ALL=NOPASSWD: /usr/sbin/service php7.2-fpm reload" > /etc/sudoers.d/php-fpm
echo "forge ALL=NOPASSWD: /usr/sbin/service php7.1-fpm reload" >> /etc/sudoers.d/php-fpm
echo "forge ALL=NOPASSWD: /usr/sbin/service php7.0-fpm reload" >> /etc/sudoers.d/php-fpm
echo "forge ALL=NOPASSWD: /usr/sbin/service php5.6-fpm reload" >> /etc/sudoers.d/php-fpm
echo "forge ALL=NOPASSWD: /usr/sbin/service php5-fpm reload" >> /etc/sudoers.d/php-fpm

	# Install Base PHP Packages


apt-get install -y --force-yes php7.2-cli php7.2-dev \
php7.2-pgsql php7.2-sqlite3 php7.2-gd \
php7.2-curl php7.2-memcached \
php7.2-imap php7.2-mysql php7.2-mbstring \
php7.2-xml php7.2-zip php7.2-bcmath php7.2-soap \
php7.2-intl php7.2-readline


# Install Composer Package Manager

curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

# Misc. PHP CLI Configuration

sudo sed -i "s/error_reporting = .*/error_reporting = E_ALL/" /etc/php/7.2/cli/php.ini
sudo sed -i "s/display_errors = .*/display_errors = On/" /etc/php/7.2/cli/php.ini
sudo sed -i "s/memory_limit = .*/memory_limit = 512M/" /etc/php/7.2/cli/php.ini
sudo sed -i "s/;date.timezone.*/date.timezone = UTC/" /etc/php/7.2/cli/php.ini

# Configure Sessions Directory Permissions

chmod 733 /var/lib/php/sessions
chmod +t /var/lib/php/sessions


	#
# REQUIRES:
#       - server (the forge server instance)
#		- site_name (the name of the site folder)
#

# Install Nginx & PHP-FPM

OpenRestyBuild() {
	
	dd if=/dev/zero of=/var/swap.img bs=1024k count=4000

	chown root:root /var/swap.img

	chmod 600 /var/swap.img

	mkswap /var/swap.img

	swapon -s /var/swap.img
	
	set -e

	case "$0" in
	  /*) my_dir=$(dirname "$0") ;;
	  *) my_dir=$(dirname "$(pwd)/${0#./}") ;;
	esac

	. ${my_dir}/versions

	if test -f /etc/os-release ; then
	  DISTRO=$(. /etc/os-release && printf "${ID}" )
	  RELEASE=$(. /etc/os-release && printf "${VERSION_ID}" )
	elif test -f /etc/fedora-release ; then
	  DISTRO="fedora"
	  RELEASE="Unknown"
	elif test -f /etc/debian_version ; then
	  DISTRO="debian"
	  RELEASE="Unknown"
	elif test -f /etc/redhat-release ; then
	  DISTRO="centos"
	  RELEASE="Unknown"
	elif test -f /etc/alpine-release ; then
	  DISTRO="alpine"
	  RELEASE="Unknown"
	fi

	if test -z "${DISTRO}" ; then
	  printf "Unable to determine distro\n"
	  exit 1
	fi

	if test "$(id -u)" != "0" ; then
	  printf "Run this script as root\n"
	  exit 1
	fi


	# defaults
	PREFIX="/opt/openresty-${OPENRESTY_VERSION}"
	nprocs=1
	make_symlinks=1

	#default on modules
	select=1
	poll=1
	http_charset=1
	http_gzip=1
	http_ssi=1
	http_userid=1
	http_access=1
	http_auth_basic=1
	http_autoindex=1
	http_geo=1
	http_map=1
	http_split_clients=1
	http_referer=1
	http_rewrite=1
	http_proxy=1
	http_fastcgi=1
	http_uwsgi=1
	http_scgi=1
	http_memcached=1
	http_limit_conn=1
	http_limit_req=1
	http_empty_gif=1
	http_browser=1
	http_upstream_hash=1
	http_upstream_ip_hash=1
	http_upstream_least_conn=1
	http_upstream_keepalive=1
	http_upstream_zone=1
	mail_pop3=1
	mail_imap=1
	mail_smtp=1
	stream_limit_conn=1
	stream_access=1
	stream_map=1
	stream_return=1
	stream_upstream_hash=1
	stream_upstream_least_conn=1
	stream_upstream_zone=1

	#default on openresty modules
	http_echo=1
	http_xss=1
	http_coolkit=1
	http_set_misc=1
	http_form_input=1
	http_encrypted_session=1
	http_srcache=1
	http_lua=1
	http_lua_upstream=1
	http_headers_more=1
	http_array_var=1
	http_memc=1
	http_redis2=1
	http_redis=1
	http_rds_json=1
	http_rds_csv=1
	http_ssl=1
	ngx_devel_kit=1
	stream_lua=1


	#default on not-modules
	http=1

	#default off
	http_addition=0
	http_auth_request=0
	http_dav=0
	http_flv=0
	http_geoip=0
	http_gunzip=0
	http_gzip_static=0
	http_image_filter=0
	http_mp4=0
	http_random_index=0
	http_realip=0
	http_secure_link=0
	http_slice=0
	http_stub_status=0
	http_sub=0
	http_v2=0
	http_xslt=0
	mail=0
	mail_ssl=0
	http_drizzle=0
	http_postgres=0
	http_iconv=0
	stream=0
	stream_ssl=0

	# external modules installed with this script
	rtmp=0
	stream_echo=0
	ngx_lua_ipc=0
	nchan=0

	if command -v nproc >/dev/null 2>&1 ; then
	  nprocs=$(nproc)
	fi

	for opt in "$@" ; do
	    case "$opt" in
	      --symlink)
	        make_symlinks=1
	        ;;
	      --prefix=*)
	        PREFIX=$(printf '%s' "$opt" | cut -d'=' -f2)
	        ;;
	      --with-*)
	        opt=$(printf '%s' "$opt" | tr '-' '_')
	        opt=${opt%_module}
	        var=${opt#__with_}
	        eval "${var}=1"
	        ;;
	      --with_*)
	        opt=$(printf '%s' "$opt" | tr '-' '_')
	        opt=${opt%_module}
	        var=${opt#__with_}
	        eval "${var}=1"
	        ;;
	      --without-*)
	        opt=$(printf '%s' "$opt" | tr '-' '_')
	        opt=${opt%_module}
	        var=${opt#__with_}
	        eval "${var}=0"
	        ;;
	      --without_*)
	        opt=$(printf '%s' "$opt" | tr '-' '_')
	        opt=${opt%_module}
	        var=${opt#__with_}
	        eval "${var}=0"
	        ;;
	      --minimal)
	        http_charset=0
	        http_gzip=0
	        http_ssi=0
	        http_userid=0
	        http_access=0
	        http_auth_basic=0
	        http_autoindex=0
	        http_geo=0
	        http_map=0
	        http_split_clients=0
	        http_referer=0
	        http_rewrite=0
	        http_proxy=0
	        http_fastcgi=0
	        http_uwsgi=0
	        http_scgi=0
	        http_memcached=0
	        http_limit_conn=0
	        http_limit_req=0
	        http_empty_gif=0
	        http_browser=0
	        http_upstream_hash=0
	        http_upstream_ip_hash=0
	        http_upstream_least_conn=0
	        http_upstream_keepalive=0
	        http_upstream_zone=0
	        mail_pop3=0
	        mail_imap=0
	        mail_smtp=0
	        stream_limit_conn=0
	        stream_access=0
	        stream_map=0
	        stream_return=0
	        stream_upstream_hash=0
	        stream_upstream_least_conn=0
	        stream_upstream_zone=0
	        http_echo=0
	        http_xss=0
	        http_coolkit=0
	        http_set_misc=0
	        http_form_input=0
	        http_encrypted_session=0
	        http_srcache=0
	        http_lua=0
	        http_lua_upstream=0
	        http_headers_more=0
	        http_array_var=0
	        http_memc=0
	        http_redis2=0
	        http_redis=0
	        http_rds_json=0
	        http_rds_csv=0
	        ngx_devel_kit=0
	        http_addition=0
	        http_auth_request=0
	        http_dav=0
	        http_flv=0
	        http_geoip=0
	        http_gunzip=0
	        http_gzip_static=0
	        http_image_filter=0
	        http_mp4=0
	        http_random_index=0
	        http_realip=0
	        http_secure_link=0
	        http_slice=0
	        http_ssl=0
	        http_stub_status=0
	        http_sub=0
	        http_v2=0
	        http_xslt=0
	        mail=0
	        mail_ssl=0
	        http_drizzle=0
	        http_postgres=0
	        http_iconv=0
	        stream=0
	        stream_ssl=0
	        stream_lua=0
	        rtmp=0
	        stream_echo=0
	        ngx_lua_ipc=0
	        nchan=0
	        ;;
	      --large)
	        # don't enable drizzle/postgres/iconv
	        http_addition=1
	        http_auth_request=1
	        http_dav=1
	        http_flv=1
	        http_geoip=1
	        http_gunzip=1
	        http_gzip_static=1
	        http_image_filter=1
	        http_mp4=1
	        http_random_index=1
	        http_realip=1
	        http_secure_link=1
	        http_slice=1
	        http_ssl=1
	        http_stub_status=1
	        http_sub=1
	        http_v2=1
	        http_xslt=1
	        mail=1
	        mail_ssl=1
	        #http_drizzle=1
	        #http_postgres=1
	        #http_iconv=1
	        stream=1
	        stream_ssl=1
	        stream_lua=1
	        rtmp=1
	        stream_echo=1
	        ngx_lua_ipc=1
	        nchan=1
	       ;;
	    esac
	done

	if ! test command -v pushd 1>/dev/null 2>&1 ; then
	pushd() {
	    if test -z "PUSHD_STACK" ; then
	        PUSHD_STACK="$PWD"
	    else
	        PUSHD_STACK="$PUSHD_STACK;$PWD"
	    fi
	    cd "$1"
	}
	popd() {
	    if test -n ${IFS+x} ; then
	      OLDIFS="${IFS}"
	    fi
	    IFS=";"
	    NEW_PUSHD_STACK=""
	    NEW_DIR=""
	    for dir in ${PUSHD_STACK} ; do
	      if test -z "${NEW_DIR}" ; then
	        NEW_DIR="${dir}"
	      else
	        if test -z "${NEW_PUSHD_STACK}" ; then
	          NEW_PUSHD_STACK="${NEW_DIR}"
	        else
	          NEW_PUSHD_STACK="${NEW_PUSHD_STACK};${NEW_DIR}"
	        fi
	        NEW_DIR="${dir}"
	      fi
	    done
	    if test -n ${OLDIFS+x} ; then
	      IFS="${OLDIFS}"
	    else
	      unset IFS
	    fi
	    cd "${NEW_DIR}"
	    PUSHD_STACK="${NEW_PUSHD_STACK}"
	    unset NEW_PUSHD_STACK
	    unset NEW_DIR
	}
	fi

	download() {
	  if ! test -f /src/"${2}" ; then
	    curl -s -R -L -o /src/"${2}" \
	      "${1}"
	  fi
	}

	extract() {
	  if ! test -d /src/${1} ; then
	    case "${2}" in
	      ".tar.gz")  tar xzf "/src/${1}${2}" -C /src ;;
	      ".tar.bz2") tar xjf "/src/${1}${2}" -C /src ;;
	      ".tar.xz")  tar xJf "/src/${1}${2}" -C /src ;;
	      *) printf "Unknown file format" ; exit 1 ;;
	    esac
	    if test -d ${my_dir}/patches/${1} ; then
	      pushd /src/$1
	      for p in ${my_dir}/patches/${1}/*.patch ; do
	        patch -p1 < ${p}
	      done
	      popd
	    fi
	  fi
	}


	PACKAGE_LOGFILE=$(mktemp)

	printf "Installing packages: ${PACKAGE_LIST}\n" | tee -a $PACKAGE_LOGFILE

	if test -n "${UPDATE_CMD}" ; then
	  ${UPDATE_CMD} 2>&1 | tee -a $PACKAGE_LOGFILE
	fi
	#${INSTALL_CMD} ${PACKAGE_LIST} 2>&1 | tee -a $PACKAGE_LOGFILE

	DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install linux-headers-generic libxslt-dev libgd-dev libgeoip-dev zlib1g-dev libreadline-dev libncurses5-dev libpcre3-dev perl make gcc unzip curl git patch tar gzip

	if ! test -d "/src" ; then
	  mkdir "/src"
	fi

	if ! test -d "/opt" ; then
	  mkdir "/opt"
	fi

	DOWNLOAD_LOGFILE=$(mktemp)

	printf "Downloading sources (details in ${DOWNLOAD_LOGFILE})\n" | tee -a $DOWNLOAD_LOGFILE

	printf "Downloading OpenResty ${OPENRESTY_VERSION}\n" | tee -a $DOWNLOAD_LOGFILE
	download \
	  "https://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz" \
	  "openresty-${OPENRESTY_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading LuaRocks ${LUAROCKS_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://luarocks.github.io/luarocks/releases/luarocks-${LUAROCKS_VERSION}.tar.gz" \
	  "luarocks-${LUAROCKS_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading Lua ${LUA_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz" \
	  "lua-${LUA_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading Stream Echo Module ${STREAM_ECHO_NGINX_MODULE_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://github.com/openresty/stream-echo-nginx-module/archive/${STREAM_ECHO_NGINX_MODULE_VERSION}.tar.gz" \
	  "stream-echo-nginx-module-${STREAM_ECHO_NGINX_MODULE_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading RTMP Module ${NGINX_RTMP_MODULE_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_MODULE_VERSION}.tar.gz" \
	  "nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading Nginx Lua IPC Module ${NGX_LUA_IPC_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://github.com/slact/ngx_lua_ipc/archive/v${NGX_LUA_IPC_VERSION}.tar.gz" \
	  "ngx_lua_ipc-${NGX_LUA_IPC_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading nchan Module ${NCHAN_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://github.com/slact/nchan/archive/v${NCHAN_VERSION}.tar.gz" \
	  "nchan-${NCHAN_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Downloading LibreSSL ${LIBRESSL_VERSION}\n" | tee -a ${DOWNLOAD_LOGFILE}
	download \
	  "https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz" \
	  "libressl-${LIBRESSL_VERSION}.tar.gz" 2>&1 | tee -a ${DOWNLOAD_LOGFILE}

	printf "Extracting sources\n"

	printf "Extracting OpenResty...\n"
	extract "openresty-${OPENRESTY_VERSION}" ".tar.gz"

	printf "Extracting LuaRocks...\n"
	extract "luarocks-${LUAROCKS_VERSION}" ".tar.gz"

	printf "Extractint Lua...\n"
	extract "lua-${LUA_VERSION}" ".tar.gz"

	printf "Extracting Stream Echo Module...\n"
	extract "stream-echo-nginx-module-${STREAM_ECHO_NGINX_MODULE_VERSION}" ".tar.gz"

	printf "Extracting RTMP module\n"
	extract "nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}" ".tar.gz"

	printf "Extracting Lua IPC module\n"
	extract "ngx_lua_ipc-${NGX_LUA_IPC_VERSION}" ".tar.gz"

	printf "Extractint NChan...\n"
	extract "nchan-${NCHAN_VERSION}" ".tar.gz"

	printf "Extracting LibreSSL...\n"
	extract "libressl-${LIBRESSL_VERSION}" ".tar.gz"

	openresty_options=""
	openresty_modules=""

	for opt in \
	  'http' ; do
	  eval "val=\$${opt}"
	  if [ ${val} -eq 0 ] ; then
	    openresty_options="${openresty_options} --without-${opt}"
	  fi
	done

	for opt in \
	  'stream' \
	  'mail' ; do
	  eval "val=\$${opt}"
	  if [ ${val} -eq 1 ] ; then
	    openresty_options="${openresty_options} --with-${opt}"
	  fi
	done

	for mod_opt in \
	  'http_addition' \
	  'http_auth_request' \
	  'http_dav' \
	  'http_flv' \
	  'http_geoip' \
	  'http_gunzip' \
	  'http_gzip_static' \
	  'http_image_filter' \
	  'http_mp4' \
	  'http_random_index' \
	  'http_realip' \
	  'http_secure_link' \
	  'http_slice' \
	  'http_stub_status' \
	  'http_sub' \
	  'http_v2' \
	  'http_xslt' \
	  'http_drizzle' \
	  'http_postgres' \
	  'http_iconv' \
	  'mail_ssl' \
	  'stream_ssl' ; do
	  eval "mod_val=\$${mod_opt}"
	  if [ ${mod_val} -eq 1 ] ; then
	    openresty_options="${openresty_options} --with-${mod_opt}_module"
	  fi
	done

	for mod_opt in \
	  'select' \
	  'poll' \
	  'http_charset' \
	  'http_gzip' \
	  'http_ssi' \
	  'http_userid' \
	  'http_access' \
	  'http_auth_basic' \
	  'http_autoindex' \
	  'http_geo' \
	  'http_ssl' \
	  'http_map' \
	  'http_split_clients' \
	  'http_referer' \
	  'http_rewrite' \
	  'http_proxy' \
	  'http_fastcgi' \
	  'http_uwsgi' \
	  'http_scgi' \
	  'http_memcached' \
	  'http_limit_conn' \
	  'http_limit_req' \
	  'http_empty_gif' \
	  'http_browser' \
	  'http_upstream_hash' \
	  'http_upstream_ip_hash' \
	  'http_upstream_least_conn' \
	  'http_upstream_keepalive' \
	  'http_upstream_zone' \
	  'mail_pop3' \
	  'mail_imap' \
	  'mail_smtp' \
	  'stream_limit_conn' \
	  'stream_access' \
	  'stream_map' \
	  'stream_return' \
	  'stream_upstream_hash' \
	  'stream_upstream_least_conn' \
	  'stream_upstream_zone' \
	  'http_echo' \
	  'http_xss' \
	  'http_coolkit' \
	  'http_set_misc' \
	  'http_form_input' \
	  'http_encrypted_session' \
	  'http_srcache' \
	  'http_lua' \
	  'http_lua_upstream' \
	  'http_headers_more' \
	  'http_array_var' \
	  'http_memc' \
	  'http_redis2' \
	  'http_redis' \
	  'http_rds_json' \
	  'http_rds_csv' \
	  'stream_lua' \
	  'ngx_devel_kit' ; do
	  eval "mod_val=\$${mod_opt}"
	  if [ ${mod_val} -eq 0 ] ; then
	    openresty_options="${openresty_options} --without-${mod_opt}_module"
	  fi
	done

	for ext_mod_opt in \
	  'rtmp' \
	  'stream_echo' \
	  'ngx_lua_ipc' \
	  'nchan' ; do
	  eval "mod_val=\$${ext_mod_opt}"
	  if [ ${mod_val} -eq 1 ] ; then
	    eval "mod_path=\$${ext_mod_opt}_path"
	    openresty_modules="${openresty_modules} --add-module=/src/${mod_path}"
	  fi
	done

	LIBRESSL_INSTALL_NEEDED=0
	OPENRESTY_INSTALL_NEEDED=0

	if ! test -f "$PREFIX/bin/openssl" ; then
	  LIBRESSL_INSTALL_NEEDED=1
	  OPENRESTY_INSTALL_NEEDED=1
	elif test "$($PREFIX/bin/openssl version | cut -f2 -d' ')" != "${LIBRESSL_VERSION}" ; then
	  LIBRESSL_INSTALL_NEEDED=1
	  OPENRESTY_INSTALL_NEEDED=1
	fi


	if test ${LIBRESSL_INSTALL_NEEDED} -eq 1 ; then
	  LIBRESSL_LOGFILE=$(mktemp)
	  printf "Configuring LibreSSL ${LIBRESSL_VERSION} (log at ${LIBRESSL_LOGFILE})\n" | tee -a $LIBRESSL_LOGFILE
	  pushd /src/libressl-${LIBRESSL_VERSION}
	  make clean >/dev/null 2>&1 || true
	  LDFLAGS="-s" \
	  ./configure \
	    --prefix=$PREFIX \
	    --enable-shared \
	    --enable-static >> $LIBRESSL_LOGFILE 2>&1
	  printf "Building LibreSSL\n" | tee -a $LIBRESSL_LOGFILE
	  make -j$nprocs >>$LIBRESSL_LOGFILE 2>&1
	  printf "Installing LibreSSL\n" | tee -a $LIBRESSL_LOGFILE
	  make install >>$LIBRESSL_LOGFILE 2>&1
	  popd
	  printf "Done installing LibreSSL\n" | tee -a $LIBRESSL_LOGFILE
	fi

	if ! test -f "$PREFIX/bin/openresty" ; then
	  OPENRESTY_INSTALL_NEEDED=1
	else
	  if test "$($PREFIX/bin/openresty -V 2>&1 | grep 'built with LibreSSL' | cut -d' ' -f4)" != "${LIBRESSL_VERSION}" ; then
	    OPENRESTY_INSTALL_NEEDED=1
	  elif test "$($PREFIX/bin/openresty -V 2>&1 | grep 'nginx version:' | cut -d'/' -f2)" != "${OPENRESTY_VERSION}" ; then
	    OPENRESTY_INSTALL_NEEDED=1
	  fi
	fi

	if test ${OPENRESTY_INSTALL_NEEDED} -eq 1 ; then
	  OPENRESTY_LOGFILE=$(mktemp)
	  printf "Configuring OpenResty ${OPENRESTY_VERSION} (log at ${OPENRESTY_LOGFILE})\n" | tee -a $OPENRESTY_LOGFILE
	  pushd /src/openresty-${OPENRESTY_VERSION}
	  eval "set -- '--prefix=$PREFIX' '--with-file-aio' '--with-ipv6' '--with-md5-asm' '--with-pcre-jit' '--with-sha1-asm' '--with-threads' ${openresty_options} ${openresty_modules} '--with-cc-opt=-I$PREFIX/include' '--with-ld-opt=-s -Wl,-rpath,$PREFIX/lib:$PREFIX/luajit/lib -L$PREFIX/lib'"
	  printf './configure' | tee -a $OPENRESTY_LOGFILE
	  printf '%s ' "$@" | tee -a $OPENRESTY_LOGFILE
	  printf '\n' | tee -a $OPENRESTY_LOGFILE
	  ./configure "$@" >> $OPENRESTY_LOGFILE
	  printf "Building OpenResty\n" | tee -a $OPENRESTY_LOGFILE
	  make -j$nprocs >> $OPENRESTY_LOGFILE 2>&1
	  printf "Installing OpenResty\n" | tee -a $OPENRESTY_LOGFILE
	  make install >> $OPENRESTY_LOGFILE 2>&1
	  popd
	  printf "Done installing OpenResty\n" | tee -a $OPENRESTY_LOGFILE
	fi

	if ! test -f "$PREFIX/luajit/bin/lua" ; then
	  LUA_LOGFILE=$(mktemp)
	  printf "Installing Lua ${LUA_VERSION} (log at ${LUA_LOGFILE})\n" | tee -a $LUA_LOGFILE
	  pushd /src/lua-${LUA_VERSION}
	  if ! test -f "src/luaconf.h.orig" ; then
	    mv src/luaconf.h src/luaconf.h.orig
	  fi
	  sed -e "s,/usr/local,$PREFIX/luajit,g" < src/luaconf.h.orig > src/luaconf.h
	  make TO_LIB="liblua.a liblua.so" clean >> $LUA_LOGFILE 2>&1
	  make -j$nprocs CFLAGS="-fPIC -O2 -Wall -DLUA_USE_LINUX" linux >> $LUA_LOGFILE 2>&1
	  make INSTALL_TOP="$PREFIX/luajit" TO_LIB="liblua.a liblua.so" install >> $LUA_LOGFILE 2>&1
	  popd
	  printf "Done installing Lua\n" | tee -a $LUA_LOGFILE
	fi

	if test ! -f "$PREFIX/luajit/bin/luarocks" ; then
	  LUAROCKS_LOGFILE=$(mktemp)
	  printf "Installing Luarocks ${LUAROCKS_VERSION} (log at ${LUAROCKS_LOGFILE})\n" | tee -a $LUAROCKS_LOGFILE
	  pushd /src/luarocks-${LUAROCKS_VERSION}
	  ./configure \
	    --prefix=$PREFIX/luajit \
	    --with-lua=$PREFIX/luajit >> $LUAROCKS_LOGFILE 2>&1
	  make clean >/dev/null 2>&1 || true
	  make build >> $LUAROCKS_LOGFILE 2>&1
	  make bootstrap >> $LUAROCKS_LOGFILE 2>&1
  cat <<EOF >$PREFIX/luajit/etc/luarocks/config-5.1.lua
rocks_trees = {
   { name = [[user]], root = home..[[/.luarocks]] },
   { name = [[system]],
     root = [[$PREFIX/luajit]],
     bin_dir = [[$PREFIX/bin]],
   }
}
external_deps_dirs = {
  [[$PREFIX]],
  [[/usr/local]],
  [[/usr]],
}
EOF
	  popd
	  printf "Done installing LuaRocks\n" | tee -a $LUAROCKS_LOGFILE
	fi

	if test ! -e "$PREFIX/bin/lua" ; then
	  ln -s "${PREFIX}/luajit/bin/lua" "${PREFIX}/bin/lua"
	fi

	if test ! -e "$PREFIX/bin/luac" ; then
	  ln -s "${PREFIX}/luajit/bin/luac" "${PREFIX}/bin/luac"
	fi

	if test ! -e "$PREFIX/bin/luajit" ; then
	  ln -s "${PREFIX}/luajit/bin/luajit" "${PREFIX}/bin/luajit"
	fi

	if test ! -e "$PREFIX/bin/luarocks" ; then
	  ln -s "${PREFIX}/luajit/bin/luarocks" "${PREFIX}/bin/luarocks"
	fi

	  mkdir -p /usr/local/openresty/
  
	  ln -s $PREFIX/luajit/bin/lua      /usr/local/bin/lua-openresty
	  ln -s $PREFIX/luajit/bin/luac     /usr/local/bin/luac-openresty
	  ln -s $PREFIX/luajit/bin/luajit   /usr/local/bin/luajit-openresty
	  ln -s $PREFIX/bin/luarocks        /usr/local/bin/luarocks-openresty
	  ln -s $PREFIX/bin/resty           /usr/local/bin/resty
	  ln -s $PREFIX/bin/restydoc        /usr/local/bin/restydoc
	  ln -s $PREFIX/bin/restydoc-index  /usr/local/bin/restydoc-index
	  ln -s $PREFIX/bin/openresty       /usr/local/bin/openresty
	  ln -s $PREFIX/bin/opm             /usr/local/bin/opm
  
	  ln -s $PREFIX/bin                 /usr/local/openresty/bin
	  ln -s $PREFIX/site                /usr/local/openresty/site
	  ln -s $PREFIX/luajit/bin/lua      /usr/local/openresty/lua-openresty
	  ln -s $PREFIX/luajit/bin/luac     /usr/local/openresty/luac-openresty
	  ln -s $PREFIX/luajit/bin/luajit   /usr/local/openresty/luajit-openresty
	  ln -s $PREFIX/bin/luarocks        /usr/local/openresty/luarocks-openresty
	  ln -s $PREFIX/bin/resty           /usr/local/openresty/resty
	  ln -s $PREFIX/bin/restydoc        /usr/local/openresty/restydoc
	  ln -s $PREFIX/bin/restydoc-index  /usr/local/openresty/restydoc-index
	  ln -s $PREFIX/bin/openresty       /usr/local/openresty/openresty
	  ln -s $PREFIX/bin/opm             /usr/local/openresty/opm
	  ln -s $PREFIX/site/lualib         /usr/local/openresty/site/lualib
  
	PATH=/usr/local/sbin:/usr/local/bin:/usr/local/openresty:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:$PATH
  

	if [ command -v update-alternatives 1>/dev/null 2>&1 ] ; then
	  update-alternatives \
	    --install /usr/bin/lua lua-interpreter $PREFIX/luajit/bin/lua 500
	  update-alternatives \
	    --install /usr/bin/luac lua-compiler $PREFIX/luajit/bin/luac 500
	fi

	export DISTRO
	export RELEASE
	${my_dir}/tools/lddsafe -nq "$PREFIX"/nginx/sbin/nginx | ${my_dir}/tools/find-deps | while read dep; do
	  ${my_dir}/tools/mark-explicit "${dep}"
	done

	# Add A Few PPAs To Stay Current

	apt-get -y install python luarocks

	luarocks install lua-resty-waf

}

OpenRestyBuild

	apt-get install -y --force-yes php7.2-fpm

systemctl enable nginx.service

# Generate dhparam File

openssl dhparam -out /etc/nginx/dhparams.pem 2048

# Tweak Some PHP-FPM Settings

sed -i "s/error_reporting = .*/error_reporting = E_ALL/" /etc/php/7.2/fpm/php.ini
sed -i "s/display_errors = .*/display_errors = On/" /etc/php/7.2/fpm/php.ini
sed -i "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" /etc/php/7.2/fpm/php.ini
sed -i "s/memory_limit = .*/memory_limit = 512M/" /etc/php/7.2/fpm/php.ini
sed -i "s/;date.timezone.*/date.timezone = UTC/" /etc/php/7.2/fpm/php.ini

# Configure FPM Pool Settings

sed -i "s/^user = www-data/user = forge/" /etc/php/7.2/fpm/pool.d/www.conf
sed -i "s/^group = www-data/group = forge/" /etc/php/7.2/fpm/pool.d/www.conf
sed -i "s/;listen\.owner.*/listen.owner = forge/" /etc/php/7.2/fpm/pool.d/www.conf
sed -i "s/;listen\.group.*/listen.group = forge/" /etc/php/7.2/fpm/pool.d/www.conf
sed -i "s/;listen\.mode.*/listen.mode = 0666/" /etc/php/7.2/fpm/pool.d/www.conf
sed -i "s/;request_terminate_timeout.*/request_terminate_timeout = 60/" /etc/php/7.2/fpm/pool.d/www.conf

# Configure Primary Nginx Settings

sed -i "s/user www-data;/user forge;/" /etc/nginx/nginx.conf
sed -i "s/worker_processes.*/worker_processes auto;/" /etc/nginx/nginx.conf
sed -i "s/# multi_accept.*/multi_accept on;/" /etc/nginx/nginx.conf
sed -i "s/# server_names_hash_bucket_size.*/server_names_hash_bucket_size 128;/" /etc/nginx/nginx.conf

# Configure Gzip

cat > /etc/nginx/conf.d/gzip.conf << EOF
gzip_comp_level 5;
gzip_min_length 256;
gzip_proxied any;
gzip_vary on;

gzip_types
application/atom+xml
application/javascript
application/json
application/rss+xml
application/vnd.ms-fontobject
application/x-font-ttf
application/x-web-app-manifest+json
application/xhtml+xml
application/xml
font/opentype
image/svg+xml
image/x-icon
text/css
text/plain
text/x-component;

EOF

# Disable The Default Nginx Site

rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default
service nginx restart

# Install A Catch All Server

cat > /etc/nginx/sites-available/catch-all << EOF
server {
    return 404;
}
EOF

ln -s /etc/nginx/sites-available/catch-all /etc/nginx/sites-enabled/catch-all

# Restart Nginx & PHP-FPM Services

# Restart Nginx & PHP-FPM Services

service nginx restart
service nginx reload

if [ ! -z "\$(ps aux | grep php-fpm | grep -v grep)" ]
then
    service php7.2-fpm restart > /dev/null 2>&1
    service php7.1-fpm restart > /dev/null 2>&1
    service php7.0-fpm restart > /dev/null 2>&1
    service php5.6-fpm restart > /dev/null 2>&1
    service php5-fpm restart > /dev/null 2>&1
fi

curl --silent --location https://deb.nodesource.com/setup_8.x | bash -

apt-get update

sudo apt-get install -y --force-yes nodejs

npm install -g pm2
npm install -g gulp
npm install -g yarn

    #
# REQUIRES:
#       - server (the forge server instance)
#       - db_password (random password for mysql user)
#

# Set The Automated Root Password

export DEBIAN_FRONTEND=noninteractive

debconf-set-selections <<< "mariadb-server-10.3 mysql-server/data-dir select ''"
debconf-set-selections <<< "mariadb-server-10.3 mysql-server/root_password password QEKcD3uHBb3dxOaTP5J0"
debconf-set-selections <<< "mariadb-server-10.3 mysql-server/root_password_again password QEKcD3uHBb3dxOaTP5J0"

# Install MySQL

apt-get install -y mariadb-server-10.3

# Configure Password Expiration

# echo "default_password_lifetime = 0" >> /etc/mysql/my.cnf

# Configure Access Permissions For Root & Forge Users

sed -i '/^bind-address/s/bind-address.*=.*/bind-address = */' /etc/mysql/my.cnf
mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "GRANT ALL ON *.* TO root@'1.2.3.4' IDENTIFIED BY 'QEKcD3uHBb3dxOaTP5J0';"
mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "GRANT ALL ON *.* TO root@'%' IDENTIFIED BY 'QEKcD3uHBb3dxOaTP5J0';"
service mysql restart

mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "CREATE USER 'forge'@'1.2.3.4' IDENTIFIED BY 'QEKcD3uHBb3dxOaTP5J0';"
mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "GRANT ALL ON *.* TO 'forge'@'1.2.3.4' IDENTIFIED BY 'QEKcD3uHBb3dxOaTP5J0' WITH GRANT OPTION;"
mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "GRANT ALL ON *.* TO 'forge'@'%' IDENTIFIED BY 'QEKcD3uHBb3dxOaTP5J0' WITH GRANT OPTION;"
mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "FLUSH PRIVILEGES;"

# Set Character Set

echo "" >> /etc/mysql/my.cnf
echo "[mysqld]" >> /etc/mysql/my.cnf
echo "character-set-server = utf8" >> /etc/mysql/my.cnf

# Create The Initial Database If Specified

mysql --user="root" --password="QEKcD3uHBb3dxOaTP5J0" -e "CREATE DATABASE forge;"


# Install & Configure Redis Server

apt-get install -y redis-server
sed -i 's/bind 127.0.0.1/bind 0.0.0.0/' /etc/redis/redis.conf
service redis-server restart
# Install & Configure Memcached

apt-get install -y memcached
sed -i 's/-l 127.0.0.1/-l 0.0.0.0/' /etc/memcached.conf
service memcached restart
# Install & Configure Beanstalk

apt-get install -y --force-yes beanstalkd
sed -i "s/BEANSTALKD_LISTEN_ADDR.*/BEANSTALKD_LISTEN_ADDR=0.0.0.0/" /etc/default/beanstalkd
sed -i "s/#START=yes/START=yes/" /etc/default/beanstalkd

service beanstalkd start
sleep 5
service beanstalkd restart

# Configure Supervisor Autostart

systemctl enable supervisor.service
service supervisor start

# Configure Swap Disk

if [ -f /swapfile ]; then
    echo "Swap exists."
else
    fallocate -l 1G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo "/swapfile none swap sw 0 0" >> /etc/fstab
    echo "vm.swappiness=30" >> /etc/sysctl.conf
    echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.conf
fi

# Setup Unattended Security Upgrades

cat > /etc/apt/apt.conf.d/50unattended-upgrades << EOF
Unattended-Upgrade::Allowed-Origins {
    "Ubuntu bionic-security";
};
Unattended-Upgrade::Package-Blacklist {
    //
};
EOF

cat > /etc/apt/apt.conf.d/10periodic << EOF
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
EOF

mainend=$(date +%s)
totalruntime=$((mainend-mainstart))

echo "Total Provosioning Proceesing Time: $totalruntime seconds!"

echo "Total Provosioning Proceesing Time: $totalruntime seconds!" > /tmp/resty-build.log
